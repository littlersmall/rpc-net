// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_packet.proto

#ifndef PROTOBUF_pb_5fpacket_2eproto__INCLUDED
#define PROTOBUF_pb_5fpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb_net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fpacket_2eproto();
void protobuf_AssignDesc_pb_5fpacket_2eproto();
void protobuf_ShutdownFile_pb_5fpacket_2eproto();

class PbPacket;

// ===================================================================

class PbPacket : public ::google::protobuf::Message {
 public:
  PbPacket();
  virtual ~PbPacket();

  PbPacket(const PbPacket& from);

  inline PbPacket& operator=(const PbPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbPacket& default_instance();

  void Swap(PbPacket* other);

  // implements Message ----------------------------------------------

  PbPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbPacket& from);
  void MergeFrom(const PbPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string packet_code = 1;
  inline bool has_packet_code() const;
  inline void clear_packet_code();
  static const int kPacketCodeFieldNumber = 1;
  inline const ::std::string& packet_code() const;
  inline void set_packet_code(const ::std::string& value);
  inline void set_packet_code(const char* value);
  inline void set_packet_code(const char* value, size_t size);
  inline ::std::string* mutable_packet_code();
  inline ::std::string* release_packet_code();
  inline void set_allocated_packet_code(::std::string* packet_code);

  // required string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required int32 send_time = 3;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  inline ::google::protobuf::int32 send_time() const;
  inline void set_send_time(::google::protobuf::int32 value);

  // optional string stat = 4;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 4;
  inline const ::std::string& stat() const;
  inline void set_stat(const ::std::string& value);
  inline void set_stat(const char* value);
  inline void set_stat(const char* value, size_t size);
  inline ::std::string* mutable_stat();
  inline ::std::string* release_stat();
  inline void set_allocated_stat(::std::string* stat);

  // optional string lock_name = 5;
  inline bool has_lock_name() const;
  inline void clear_lock_name();
  static const int kLockNameFieldNumber = 5;
  inline const ::std::string& lock_name() const;
  inline void set_lock_name(const ::std::string& value);
  inline void set_lock_name(const char* value);
  inline void set_lock_name(const char* value, size_t size);
  inline ::std::string* mutable_lock_name();
  inline ::std::string* release_lock_name();
  inline void set_allocated_lock_name(::std::string* lock_name);

  // optional string memo = 6;
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 6;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional string json_str = 7;
  inline bool has_json_str() const;
  inline void clear_json_str();
  static const int kJsonStrFieldNumber = 7;
  inline const ::std::string& json_str() const;
  inline void set_json_str(const ::std::string& value);
  inline void set_json_str(const char* value);
  inline void set_json_str(const char* value, size_t size);
  inline ::std::string* mutable_json_str();
  inline ::std::string* release_json_str();
  inline void set_allocated_json_str(::std::string* json_str);

  // optional int32 id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 9;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 9;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:pb_net.PbPacket)
 private:
  inline void set_has_packet_code();
  inline void clear_has_packet_code();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_lock_name();
  inline void clear_has_lock_name();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_json_str();
  inline void clear_has_json_str();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* packet_code_;
  ::std::string* uuid_;
  ::std::string* stat_;
  ::std::string* lock_name_;
  ::google::protobuf::int32 send_time_;
  ::google::protobuf::int32 id_;
  ::std::string* memo_;
  ::std::string* json_str_;
  ::std::string* email_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_pb_5fpacket_2eproto();
  friend void protobuf_AssignDesc_pb_5fpacket_2eproto();
  friend void protobuf_ShutdownFile_pb_5fpacket_2eproto();

  void InitAsDefaultInstance();
  static PbPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// PbPacket

// required string packet_code = 1;
inline bool PbPacket::has_packet_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbPacket::set_has_packet_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbPacket::clear_has_packet_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbPacket::clear_packet_code() {
  if (packet_code_ != &::google::protobuf::internal::kEmptyString) {
    packet_code_->clear();
  }
  clear_has_packet_code();
}
inline const ::std::string& PbPacket::packet_code() const {
  return *packet_code_;
}
inline void PbPacket::set_packet_code(const ::std::string& value) {
  set_has_packet_code();
  if (packet_code_ == &::google::protobuf::internal::kEmptyString) {
    packet_code_ = new ::std::string;
  }
  packet_code_->assign(value);
}
inline void PbPacket::set_packet_code(const char* value) {
  set_has_packet_code();
  if (packet_code_ == &::google::protobuf::internal::kEmptyString) {
    packet_code_ = new ::std::string;
  }
  packet_code_->assign(value);
}
inline void PbPacket::set_packet_code(const char* value, size_t size) {
  set_has_packet_code();
  if (packet_code_ == &::google::protobuf::internal::kEmptyString) {
    packet_code_ = new ::std::string;
  }
  packet_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_packet_code() {
  set_has_packet_code();
  if (packet_code_ == &::google::protobuf::internal::kEmptyString) {
    packet_code_ = new ::std::string;
  }
  return packet_code_;
}
inline ::std::string* PbPacket::release_packet_code() {
  clear_has_packet_code();
  if (packet_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_code_;
    packet_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_packet_code(::std::string* packet_code) {
  if (packet_code_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_code_;
  }
  if (packet_code) {
    set_has_packet_code();
    packet_code_ = packet_code;
  } else {
    clear_has_packet_code();
    packet_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string uuid = 2;
inline bool PbPacket::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbPacket::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbPacket::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbPacket::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PbPacket::uuid() const {
  return *uuid_;
}
inline void PbPacket::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PbPacket::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PbPacket::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* PbPacket::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 send_time = 3;
inline bool PbPacket::has_send_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbPacket::set_has_send_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbPacket::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbPacket::clear_send_time() {
  send_time_ = 0;
  clear_has_send_time();
}
inline ::google::protobuf::int32 PbPacket::send_time() const {
  return send_time_;
}
inline void PbPacket::set_send_time(::google::protobuf::int32 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional string stat = 4;
inline bool PbPacket::has_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbPacket::set_has_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbPacket::clear_has_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbPacket::clear_stat() {
  if (stat_ != &::google::protobuf::internal::kEmptyString) {
    stat_->clear();
  }
  clear_has_stat();
}
inline const ::std::string& PbPacket::stat() const {
  return *stat_;
}
inline void PbPacket::set_stat(const ::std::string& value) {
  set_has_stat();
  if (stat_ == &::google::protobuf::internal::kEmptyString) {
    stat_ = new ::std::string;
  }
  stat_->assign(value);
}
inline void PbPacket::set_stat(const char* value) {
  set_has_stat();
  if (stat_ == &::google::protobuf::internal::kEmptyString) {
    stat_ = new ::std::string;
  }
  stat_->assign(value);
}
inline void PbPacket::set_stat(const char* value, size_t size) {
  set_has_stat();
  if (stat_ == &::google::protobuf::internal::kEmptyString) {
    stat_ = new ::std::string;
  }
  stat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_stat() {
  set_has_stat();
  if (stat_ == &::google::protobuf::internal::kEmptyString) {
    stat_ = new ::std::string;
  }
  return stat_;
}
inline ::std::string* PbPacket::release_stat() {
  clear_has_stat();
  if (stat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stat_;
    stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_stat(::std::string* stat) {
  if (stat_ != &::google::protobuf::internal::kEmptyString) {
    delete stat_;
  }
  if (stat) {
    set_has_stat();
    stat_ = stat;
  } else {
    clear_has_stat();
    stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lock_name = 5;
inline bool PbPacket::has_lock_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbPacket::set_has_lock_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbPacket::clear_has_lock_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbPacket::clear_lock_name() {
  if (lock_name_ != &::google::protobuf::internal::kEmptyString) {
    lock_name_->clear();
  }
  clear_has_lock_name();
}
inline const ::std::string& PbPacket::lock_name() const {
  return *lock_name_;
}
inline void PbPacket::set_lock_name(const ::std::string& value) {
  set_has_lock_name();
  if (lock_name_ == &::google::protobuf::internal::kEmptyString) {
    lock_name_ = new ::std::string;
  }
  lock_name_->assign(value);
}
inline void PbPacket::set_lock_name(const char* value) {
  set_has_lock_name();
  if (lock_name_ == &::google::protobuf::internal::kEmptyString) {
    lock_name_ = new ::std::string;
  }
  lock_name_->assign(value);
}
inline void PbPacket::set_lock_name(const char* value, size_t size) {
  set_has_lock_name();
  if (lock_name_ == &::google::protobuf::internal::kEmptyString) {
    lock_name_ = new ::std::string;
  }
  lock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_lock_name() {
  set_has_lock_name();
  if (lock_name_ == &::google::protobuf::internal::kEmptyString) {
    lock_name_ = new ::std::string;
  }
  return lock_name_;
}
inline ::std::string* PbPacket::release_lock_name() {
  clear_has_lock_name();
  if (lock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lock_name_;
    lock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lock_name_;
  }
  if (lock_name) {
    set_has_lock_name();
    lock_name_ = lock_name;
  } else {
    clear_has_lock_name();
    lock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string memo = 6;
inline bool PbPacket::has_memo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbPacket::set_has_memo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbPacket::clear_has_memo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbPacket::clear_memo() {
  if (memo_ != &::google::protobuf::internal::kEmptyString) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& PbPacket::memo() const {
  return *memo_;
}
inline void PbPacket::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::kEmptyString) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
}
inline void PbPacket::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::kEmptyString) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
}
inline void PbPacket::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::kEmptyString) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::kEmptyString) {
    memo_ = new ::std::string;
  }
  return memo_;
}
inline ::std::string* PbPacket::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::kEmptyString) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string json_str = 7;
inline bool PbPacket::has_json_str() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbPacket::set_has_json_str() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbPacket::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbPacket::clear_json_str() {
  if (json_str_ != &::google::protobuf::internal::kEmptyString) {
    json_str_->clear();
  }
  clear_has_json_str();
}
inline const ::std::string& PbPacket::json_str() const {
  return *json_str_;
}
inline void PbPacket::set_json_str(const ::std::string& value) {
  set_has_json_str();
  if (json_str_ == &::google::protobuf::internal::kEmptyString) {
    json_str_ = new ::std::string;
  }
  json_str_->assign(value);
}
inline void PbPacket::set_json_str(const char* value) {
  set_has_json_str();
  if (json_str_ == &::google::protobuf::internal::kEmptyString) {
    json_str_ = new ::std::string;
  }
  json_str_->assign(value);
}
inline void PbPacket::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  if (json_str_ == &::google::protobuf::internal::kEmptyString) {
    json_str_ = new ::std::string;
  }
  json_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_json_str() {
  set_has_json_str();
  if (json_str_ == &::google::protobuf::internal::kEmptyString) {
    json_str_ = new ::std::string;
  }
  return json_str_;
}
inline ::std::string* PbPacket::release_json_str() {
  clear_has_json_str();
  if (json_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = json_str_;
    json_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_json_str(::std::string* json_str) {
  if (json_str_ != &::google::protobuf::internal::kEmptyString) {
    delete json_str_;
  }
  if (json_str) {
    set_has_json_str();
    json_str_ = json_str;
  } else {
    clear_has_json_str();
    json_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 8;
inline bool PbPacket::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PbPacket::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PbPacket::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PbPacket::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PbPacket::id() const {
  return id_;
}
inline void PbPacket::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string email = 9;
inline bool PbPacket::has_email() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbPacket::set_has_email() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbPacket::clear_has_email() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbPacket::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PbPacket::email() const {
  return *email_;
}
inline void PbPacket::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PbPacket::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PbPacket::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbPacket::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* PbPacket::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbPacket::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fpacket_2eproto__INCLUDED
